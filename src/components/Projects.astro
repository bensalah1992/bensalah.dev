---
interface ProjectItem {
    title: string;
    description: string;
    image: string;
    type: 'blog' | 'project';
    link: string;
    longDescription?: string;
}

const projects: ProjectItem[] = [
    {
        title: "Cyber Kitten Password Generator",
        description: "Ein Password-Generator",
        image: "/images/projects/projekt1.png",
        type: "project",
        link: "https://cyber-kitten-password-generator.replit.app/",
        longDescription: "(2024) “Cyber Kitten” ist ein clientseitiger Passwort-Generator, der in der Online-IDE Replit umgesetzt ist. Alles findet im Frontend statt. Hosting und Deployment läuft ebenfalls vollständig über Replit. Ich mag Katzen()"
    },
    {
        title: "Digitaler Wandel",
        description: "Digitaler Wandel Buch",
        image: "/images/projects/projekt2.png",
        type: "project",
        link: "https://www.epubli.com/shop/digitaler-wandel-9783819082023",
        longDescription: "(2025) Für mich ein Herzensprojekt – für euch eine Möglichkeit, mich zu supporten. – „Digitaler Wandel“ ist ein kurzes Buch über unsere gemeinsame Reise: von den Anfängen des Internets bis hin zu Konzepten digitaler Unsterblichkeit. Beim Schreiben habe ich viel dazugelernt und neue Perspektiven gewonnen. Viel Spaß beim Lesen und danke für deinen Support."
    },
    // Weitere Projekte hier...
];
---

<section id="projects" class="projects">
    <div class="container">
        <h2 class="section-title">Blog & Projekte</h2>
        <p class="section-subtitle">Hier sind spannende Projekte und Beiträge an denen ich gearbeitet habe</p>
        
        <div class="projects-grid">
            {projects.map((item) => (
                <div class="project-card" 
                    data-type={item.type} 
                    data-link={item.link}
                    data-description={item.longDescription}>
                    <div class="project-image">
                        <img src={item.image} alt={item.title} />
                    </div>
                    <h3>{item.title}</h3>
                    <div class="card-footer">
                        <span class="more-text">Mehr</span>
                    </div>
                </div>
            ))}
        </div>
    </div>
</section>

<div class="project-modal" id="projectModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <div class="modal-body">
            <div class="modal-image">
                <img src="" alt="" />
            </div>
            <div class="modal-info">
                <h2></h2>
                <p class="modal-description"></p>
                <a href="" class="project-link button" target="_blank">Zum Projekt</a>
            </div>
        </div>
    </div>
</div>

<style>
    .projects {
        padding: 4rem 0;
    }

    .section-title {
        text-align: center;
        margin-bottom: 1rem;
    }

    .section-subtitle {
        text-align: center;
        color: var(--secondary);
        margin-bottom: 4rem;
        font-size: 1.5rem;
    }

    .projects-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 2rem;
        overflow-x: hidden;
        padding-top: 5px;
        position: relative;
    }

    .project-card {
        background: var(--background);
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
        display: flex;
        flex-direction: column;
        min-width: 280px;
        position: relative;
        z-index: 1;
    }

    .project-card:hover {
        transform: translateY(-5px);
        border-color: var(--primary);
        box-shadow: 0 5px 15px rgba(255, 140, 0, 0.2);
        z-index: 2;
    }

    .project-image {
        position: relative;
        aspect-ratio: 2/3;
        overflow: hidden;
    }

    .project-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .card-footer {
        padding: 0 0.7rem 0.5rem;
        margin-top: auto;
        text-align: right;
    }

    .more-text {
        color: var(--text);
        font-size: 1.1rem;
        opacity: 0;
        font-weight: 300;
        transition: opacity 0.3s ease;
    }

    .project-card:hover .more-text {
        opacity: 0.7;
    }

    .project-card h3 {
        padding: 0.7rem;
        margin: 0;
        font-size: 1.5rem;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    @media (max-width: 1200px) {
        .projects-grid {
            grid-template-columns: repeat(3, 1fr);
            gap: 1.25rem;
        }
    }

    @media (max-width: 900px) {
        .projects-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
    }

    @media (max-width: 600px) {
        .projects-grid {
            display: flex;
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            padding: 1rem 0;
            gap: 1.5rem;
        }

        .project-card {
            scroll-snap-align: start;
            flex-shrink: 0;
            width: 85%;
        }

        .more-text {
            opacity: 0.7;
        }

        .project-card:hover .more-text {
            opacity: 0.7;
        }

        .projects-grid::-webkit-scrollbar {
            display: none;
        }
    }

    .project-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        z-index: 1000;
    }

    .modal-content {
        position: relative;
        width: 90%;
        max-width: 1000px;
        margin: 0 auto;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-height: 90vh;
        background: var(--background);
        border-radius: 8px;
        border: 2px solid var(--primary);
        overflow: hidden;
    }

    .modal-body {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        overflow-y: auto;
        max-height: calc(90vh - 4rem);
        padding: 2rem;
    }

    .modal-image {
        aspect-ratio: 2/3;
        overflow: hidden;
        height: fit-content;
    }

    .modal-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .modal-info {
        padding: 0 0 0 2rem;
        display: flex;
        flex-direction: column;
    }

    .modal-info h2 {
        margin-bottom: 1rem;
    }

    .modal-description {
        flex-grow: 1;
        margin-bottom: 2rem;
        font-size: 1.2rem;
        line-height: 1.6;
    }

    .close-modal {
        position: absolute;
        right: 1rem;
        top: 1rem;
        font-size: 2rem;
        color: var(--text);
        cursor: pointer;
        z-index: 10;
    }

    @media (max-width: 768px) {
        .modal-body {
            grid-template-columns: 1fr;
            padding: 1rem;
        }

        .modal-info {
            padding: 1rem 0 0 0;
        }
    }
</style>

<script>
    const projectCards = document.querySelectorAll('.project-card');
    const modal = document.getElementById('projectModal');
    const modalImage = modal?.querySelector('.modal-image img') as HTMLImageElement;
    const modalTitle = modal?.querySelector('.modal-info h2');
    const modalDescription = modal?.querySelector('.modal-description');
    const modalLink = modal?.querySelector('.project-link') as HTMLAnchorElement;
    const closeBtn = modal?.querySelector('.close-modal');

    projectCards.forEach(card => {
        card.addEventListener('click', () => {
            const title = card.querySelector('h3')?.textContent || '';
            const image = card.querySelector('img')?.src || '';
            const link = card.getAttribute('data-link') || '';
            const description = card.getAttribute('data-description') || '';
            
            if (modal && modalImage && modalTitle && modalDescription && modalLink) {
                modalImage.src = image;
                modalImage.alt = title;
                modalTitle.textContent = title;
                modalDescription.textContent = description;
                modalLink.href = link;
                modal.style.display = 'block';
            }
        });
    });

    closeBtn?.addEventListener('click', () => {
        if (modal) modal.style.display = 'none';
    });

    window.addEventListener('click', (e) => {
        if (modal && e.target === modal) {
            modal.style.display = 'none';
        }
    });
</script>